version: 2.1

executors:
  java:
    docker:
    - image: circleci/openjdk:11-jdk-node-browsers
    working_directory: ~/repo
    environment:
      GRADLE_OPTS: -Xmx2048m
      TERM: dumb
  cf:
    docker:
    - image: pcfnorm/rootfs
    working_directory: ~/repo
    environment:
      TERM: dumb

commands:
  gradle-build:
    description: "Build the project using Gradle"
    parameters:
      tasks:
        type: string
        default: "clean test"
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-
    - run: gradle dependencies
    - save_cache:
        paths:
        - ~/.gradle
        key: v1-dependencies-{{ checksum "build.gradle" }}
    - run:
        command: |
          # Save the Google Service Key to a local file
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json

          gradle << parameters.tasks >> --no-daemon --info

          # Clean up extra artifacts before persiting to workspace
          find . -name '*-javadoc.jar' -delete
          find . -name '*-sources.jar' -delete
          find . -name '*-stubs.jar' -delete
    - persist_to_workspace:
        root: ~/repo
        paths:
        - "**/dist/site/**"
        - "**/build/libs/*-SNAPSHOT.jar"

  cf-push:
    description: "Push app to Cloud Foundry"
    parameters:
      baseDir:
        type: string
      args:
        type: string
        default: ""
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo
    - run:
        name: Push to PCF dev environment
        command: |
          cf api $CF_API
          cf auth $CF_USERNAME $CF_PASSWORD
          cf target -o $CF_ORGANIZATION -s $ENV

          cd << parameters.baseDir >>
          cf push -f manifest-$ENV.yml << parameters.args >>

jobs:
  test:
    executor: java
    steps:
    - gradle-build:
        tasks: clean test

  build-snapshot:
    executor: java
    steps:
    - gradle-build:
        tasks: clean snapshot publish

  build-release:
    executor: java
    steps:
    - gradle-build:
        tasks: clean release publish

  deploy-entry-service-dev:
    executor: cf
    environment:
      SPRING_PROFILES_ACTIVE: dev
      ENV: dev
    steps:
    - cf-push:
        baseDir: entry-service
        args: -p build/libs/entry-service-*.jar

  deploy-entry-service-prod:
    executor: cf
    environment:
      SPRING_PROFILES_ACTIVE: prod
      ENV: prod
    steps:
    - cf-push:
        baseDir: entry-service
        args: -p build/libs/entry-service-*.jar

  deploy-annalist-dev:
    executor: cf
    environment:
      SPRING_PROFILES_ACTIVE: dev
      ENV: dev
    steps:
    - cf-push:
        baseDir: annalist

  deploy-annalist-prod:
    executor: cf
    environment:
      SPRING_PROFILES_ACTIVE: prod
      ENV: prod
    steps:
    - cf-push:
        baseDir: annalist

workflows:
  version: 2

  # This workflow makes sure to build and test all incoming changes regardless of branch
  ci:
    jobs:
    - test:
        filters:
          branches:
            ignore:
            - develop
            - master

  # This workflow builds, publishes, and deploys snapshots from the develop branch
  build-deploy-snapshot:
    jobs:
    - build-snapshot:
        filters:
          branches:
            only:
            - develop
    - deploy-entry-service-dev:
        filters:
          branches:
            only:
            - develop
        requires:
        - build-snapshot
    - deploy-annalist-dev:
        filters:
          branches:
            only:
            - develop
        requires:
        - build-snapshot

  # This workflow builds, publishes, and deploys releases triggered by tags
  build-deploy-release:
    jobs:
    - build-release:
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - deploy-entry-service-prod:
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
        requires:
        - build-release
    - deploy-annalist-prod:
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
        requires:
        - build-release