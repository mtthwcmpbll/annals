buildscript {
    ext {
        jvmCompatibility = '1.8'
        kotlinVersion = '1.2.51'
        springBootVersion = '2.1.0.M1'
        springCloudContractVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:${springCloudContractVersion}")

        classpath "com.netflix.nebula:nebula-publishing-plugin:8.1.0"
        classpath "com.netflix.nebula:nebula-project-plugin:4.1.0"
    }
}

apply from: "${rootDir}/gradle/kotlin.gradle"
apply from: "${rootDir}/gradle/spring-boot.gradle"
apply from: "${rootDir}/gradle/react-client.gradle"

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.2'

    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')

    testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.1.1')
}

contracts {
    basePackageForTests = 'com.snowfort.annals.entry.contract'
    packageWithBaseClasses = 'com.snowfort.annals.entry.contract'
}

publishing {
    repositories {
        maven {
            url "gcs://repo.snowfort.com/${project.version.toString().endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
        }
    }
    publications {
        service(MavenPublication) {
            from components.java
        }
    }
}