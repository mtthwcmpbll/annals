buildscript {
    ext {
        jvmCompatibility = '11'
        springBootVersion = '2.1.0.M4'
        springCloudVersion = 'Finchley.SR1'
        springCloudContractVersion = '2.0.1.RELEASE'
        springCloudConnectorsVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:${springCloudContractVersion}")

        classpath "com.netflix.nebula:nebula-publishing-plugin:8.1.0"
        classpath "com.netflix.nebula:nebula-project-plugin:4.1.0"

        classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")
    }
}

apply from: "${rootDir}/gradle/java.gradle"
apply from: "${rootDir}/gradle/spring-boot.gradle"
apply from: "${rootDir}/gradle/react-client.gradle"

repositories {
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.2'

    compile "io.springfox:springfox-swagger2:3.0.0-SNAPSHOT"
    compile "io.springfox:springfox-spring-webflux:3.0.0-SNAPSHOT"
    compile "io.springfox:springfox-swagger-ui:3.0.0-SNAPSHOT"

    compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudConnectorsVersion}"
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')

//    testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.1.1')
}

contracts {
    basePackageForTests = 'com.snowfort.annals.entry.contract'
    packageWithBaseClasses = 'com.snowfort.annals.entry.contract'
}

publishing {
    repositories {
        maven {
            url "gcs://repo.snowfort.com/${project.version.toString().endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
        }
    }
    publications {
        service(MavenPublication) {
            from components.java
        }
    }
}